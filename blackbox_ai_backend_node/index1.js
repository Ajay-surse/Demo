import express from "express";
import fs from "fs";
import path from "path";
import { Octokit } from "@octokit/rest";
import simpleGit from "simple-git";
import { GoogleGenerativeAI } from "@google/generative-ai";
import dotenv from "dotenv";
dotenv.config();

const router = express.Router();
const git = simpleGit();
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });

const repo = process.env.REPO; // "username/repo"
const projectFolderToScan = process.env.PROJECT_PATH;

function getAllCodeFiles(dir, fileList = []) {
  const files = fs.readdirSync(dir);
  files.forEach(file => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    if (stat.isDirectory()) {
      getAllCodeFiles(filePath, fileList);
    } else if (filePath.endsWith(".js") || filePath.endsWith(".ts") || filePath.endsWith(".jsx") || filePath.endsWith(".tsx")) {
      fileList.push(filePath);
    }
  });
  return fileList;
}

async function fixCodeUsingAI(code, fileName) {
  const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
  const prompt = `
You are a senior software engineer. Fix any syntax, logical, or style issues in the following ${fileName} file code. Return only the corrected code, no explanation.

\`\`\`
${code}
\`\`\`
`;
  const result = await model.generateContent(prompt);
  return result.response.text();
}

router.post("/scan-and-pr", async (req, res) => {
  try {
    const branchName = `ai/code-scan-${Date.now()}`;
    await git.checkoutLocalBranch(branchName);

    const files = getAllCodeFiles(projectFolderToScan);
    let filesModified = 0;

    for (const filePath of files) {
      const originalCode = fs.readFileSync(filePath, "utf8");
      const fixedCode = await fixCodeUsingAI(originalCode, path.basename(filePath));

      if (fixedCode.trim() !== originalCode.trim()) {
        fs.writeFileSync(filePath, fixedCode, "utf8");
        await git.add(filePath);
        filesModified++;
      }
    }

    if (filesModified === 0) {
      return res.json({ message: "No issues found. No PR created." });
    }

    await git.commit("AI: Automatically fixed code issues using Gemini");
    await git.push("origin", branchName);

    const [owner, repoName] = repo.split("/");
    const pr = await octokit.pulls.create({
      owner,
      repo: repoName,
      title: "AI Code Scan Fixes",
      head: branchName,
      base: "main",
      body: "This PR was generated by the AI code scanner using Gemini.",
    });

    res.json({ message: "Pull request created", prUrl: pr.data.html_url });
  } catch (err) {
    console.error("‚ùå Error during scan-and-pr:", err);
    res.status(500).json({ error: err.message });
  }
});

export default router;
