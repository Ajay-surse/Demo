import express from "express";
import fs from "fs";
import path from "path";
import { Octokit } from "@octokit/rest";
import simpleGit from "simple-git";
import axios from "axios";
import dotenv from "dotenv";
dotenv.config();

const router = express.Router();
const git = simpleGit();
const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
const repo = process.env.GITHUB_REPO;
const projectFolderToScan = process.env.SCAN_FOLDER_PATH;

// Get all JS/TS/JSX/TSX files recursively
function getAllCodeFiles(dir, fileList = []) {
  const files = fs.readdirSync(dir);
  files.forEach(file => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    if (stat.isDirectory()) {
      getAllCodeFiles(filePath, fileList);
    } else if (/\.(js|ts|jsx|tsx)$/.test(file)) {
      fileList.push(filePath);
    }
  });
  return fileList;
}

// Use Groq's LLaMA 3 model to fix code
async function fixCodeUsingAI(code, fileName) {
  const prompt = `
You are a senior software engineer. Fix any syntax, logical, or style issues in the following file: ${fileName}.
Return only the corrected code. Do not include any explanations.

\`\`\`
${code}
\`\`\`
`;

  const response = await axios.post(
    "https://api.groq.com/openai/v1/chat/completions",
    {
      model: "llama3-70b-8192",
      messages: [{ role: "user", content: prompt }],
      temperature: 0.2,
    },
    {
      headers: {
        Authorization: `Bearer ${process.env.GROK_API_KEY}`,
        "Content-Type": "application/json",
      },
    }
  );

  return response.data.choices[0].message.content;
}

router.post("/scan-and-pr", async (req, res) => {
  try {
    const branchName = `ai/code-scan-${Date.now()}`;
    await git.checkoutLocalBranch(branchName);

    const files = getAllCodeFiles(projectFolderToScan);
    let filesModified = 0;

    for (const filePath of files) {
      const originalCode = fs.readFileSync(filePath, "utf8");
      const fixedCode = await fixCodeUsingAI(originalCode, path.basename(filePath));

      if (fixedCode.trim() !== originalCode.trim()) {
        fs.writeFileSync(filePath, fixedCode, "utf8");
        await git.add(filePath);
        filesModified++;
      }
    }

    if (filesModified === 0) {
      return res.json({ message: "No issues found. No PR created." });
    }

    await git.commit("AI: Automatically fixed code issues using LLaMA 3 via Groq");
    await git.push("origin", branchName);

    const [owner, repoName] = repo.split("/");
    const pr = await octokit.pulls.create({
      owner,
      repo: repoName,
      title: "AI Code Scan Fixes",
      head: branchName,
      base: "main",
      body: "This PR was generated by the AI code scanner using LLaMA 3 (Groq).",
    });

    res.json({ message: "Pull request created", prUrl: pr.data.html_url });
  } catch (err) {
    console.error("‚ùå Error during scan-and-pr:", err);
    res.status(500).json({ error: err.message });
  }
});

export default router;


