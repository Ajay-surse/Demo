import express from "express";
import fs from "fs";
import path from "path";
import simpleGit from "simple-git";
import { Octokit } from "@octokit/rest";
import 'dotenv/config';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const router = express.Router();
const git = simpleGit();
const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });

const repo = process.env.GITHUB_REPO;
const username = process.env.GITHUB_USERNAME;
const projectFolderToScan = process.env.SCAN_FOLDER_PATH;

// Helper: Read all code files
function getAllCodeFiles(dir, fileList = []) {
  const files = fs.readdirSync(dir);
  files.forEach((file) => {
    const fullPath = path.join(dir, file);
    if (fs.statSync(fullPath).isDirectory()) {
      getAllCodeFiles(fullPath, fileList);
    } else if (file.endsWith(".js") || file.endsWith(".ts") || file.endsWith(".py")) {
      fileList.push(fullPath);
    }
  });
  return fileList;
}

// POST /api/scan-and-pr
router.post("/scan-and-pr", async (req, res) => {
  try {
    const branchName = `ai/code-scan-${Date.now()}`;
    await git.checkoutLocalBranch(branchName);

    const files = getAllCodeFiles(projectFolderToScan);
    for (let filePath of files) {
      const original = fs.readFileSync(filePath, "utf8");

      // Simulate AI fix â€” integrate Gemini or Deepseek here
      const fixed = original + "\n";
      // In a real scenario, you would call your AI service here to get the fixed code

      if (original !== fixed) {
        fs.writeFileSync(filePath, fixed, "utf8");
        await git.add(filePath);
      }
    }

    await git.commit("AI: Fixed code issues");
    await git.push("origin", branchName);

    // Create pull request via GitHub API
    const [owner, repoName] = repo.split("/");
    const pr = await octokit.pulls.create({
      owner,
      repo: repoName,
      title: "AI Code Scan Fixes",
      head: branchName,
      base: "main", // Or 'master' depending on your repo's default branch
      body: "This PR was generated by AI code scanning tool.",
    });

    res.json({ message: "Pull request created", prUrl: pr.data.html_url });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: err.message });
  }
});

export default router;


